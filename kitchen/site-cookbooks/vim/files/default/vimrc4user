" ------------------------------------------------------------
" 基本的な設定
" ------------------------------------------------------------
syntax on
" colorscheme shandy
" colorscheme jellybeans
colorscheme molokai
set nocompatible  " vimです
set fileformats=unix,dos,mac " 改行コードの自動認識
set vb t_vb= " ビープ音をならさない
set scrolloff=5 " スクロール時の余白確保

" バックアップを取らない
set nobackup


" ------------------------
" 表示関係
" -------------------------
set number
set showmode                     " 現在のモードを表示
set modelines=0                  " モードラインは無効
set title
set ruler
set list
set listchars=tab:»-,trail:-,nbsp:%
set display=uhex
set t_Co=256
set showcmd
set showmatch
set laststatus=2
set autoindent " 新しいインデントを現在行と同じにする

"------------------------------
" neobundle
"------------------------------

if has('vim_starting')
  set nocompatible               " Be iMproved

  " Required:
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('~/.vim/bundle'))

NeoBundle 'nanotech/jellybeans.vim'
NeoBundle 'git://github.com/Shougo/neobundle.vim.git'
NeoBundle 'Shougo/vimproc'
NeoBundle 'git://github.com/thinca/vim-quickrun.git'
NeoBundle 'git://github.com/vim-scripts/VimCoder.jar'
NeoBundle 'Shougo/neocomplcache'
NeoBundle 'Shougo/neosnippet'
NeoBundle 'honza/snipmate-snippets.git'
NeoBundle 'tsukkee/unite-tag.git'
NeoBundle 'Shougo/unite.vim.git'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'mattn/webapi-vim'
NeoBundle 'mattn/gist-vim'

" ------------------------vimfiler
NeoBundle 'Shougo/vimfiler.git'
"vimデフォルトのエクスプローラをvimfilerで置き換える
let g:vimfiler_as_default_explorer = 1
"セーフモードを無効にした状態で起動する
let g:vimfiler_safe_mode_by_default = 0

"現在開いているファイルのディレクトリ下のファイル一覧。
"開いていない場合はカレントディレクトリ
nnoremap <silent> [unite]f :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
"バッファ一覧
nnoremap <silent> [unite]b :<C-u>Unite buffer<CR>
"レジスタ一覧
nnoremap <silent> [unite]r :<C-u>Unite -buffer-name=register register<CR>
"最近使用したファイル一覧
nnoremap <silent> [unite]m :<C-u>Unite file_mru<CR>
"ブックマーク一覧
nnoremap <silent> [unite]c :<C-u>Unite bookmark<CR>
"ブックマークに追加
nnoremap <silent> [unite]a :<C-u>UniteBookmarkAdd<CR>

NeoBundle 'Shougo/vimshell.git'
nnoremap ,vs :VimShell<CR>

" 'topope/vim-fugitive'
" nnoremap <silent> <Space>gb :Gblame<CR>
" nnoremap <silent> <Space>gd :Gdiff<CR>
" nnoremap <silent> <Space>gs :Gstatus<CR>

" 英語の補完を行う
NeoBundle 'ujihisa/neco-look.git'

" ()や''でくくったりするための補助
" text-objectの支援
" vi' で'の中身を選択
" va' で'も含めて選択 だが
" cs'" cs"' などと囲っているものに対する操作ができる
" visualモードのときはSを代用
NeoBundle 'tpope/vim-surround'
NeoBundle 'tpope/vim-pathogen.git'

" =と押して = となるようにする他
NeoBundle "smartchr"
" inoremap <expr> = smartchr#loop(' = ', '=', ' == ')
" inoremap <expr> , smartchr#one_of(', ', ',')
" inoremap # a<C-H>#

" endfunction とかを自動入力
NeoBundle 'tpope/vim-endwise'

" Ruby環境
NeoBundle 'vim-ruby/vim-ruby.git'

" ステータスラインをかっこ良く
NeoBundle 'Lokaltog/powerline', { 'rtp' : 'powerline/bindings/vim' }
let g:Powerline_symbols='fancy'
set guifont=Ricty\ Regular\ for\ Powerline.ttf
set t_Co=256


" カーソル移動を加速する
NeoBundle 'rhysd/accelerated-jk.git'
let g:accelerated_jk_acceleration_table = [5,3,1]
nmap j <Plug>(accelerated_jk_gj)
nmap k <Plug>(accelerated_jk_gk)

filetype plugin indent on

let g:neocomplcache_snippets_dir = '~/.vim/snippets'
let g:neosnippet#snippets_directory='~/.vim/bundle/snipmate-snippets/snippets, ~/dotfiles/snippets'


" <C-k> にマッピング
" for snippets
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<S-TAB>"

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
" <C-h>や<BS>を押したときに確実にポップアップを削除します
inoremap <expr><C-h> neocomplcache#smart_close_popup().”\<C-h>”
"tabで補完候補の選択を行う
inoremap <expr><TAB> pumvisible() ? "\<Down>" : "\<TAB>"
inoremap <expr><S-TAB> pumvisible() ? "\<Up>" : "\<S-TAB>"

" For snippet_complete marker.
if has('conceal')
    set conceallevel=2 concealcursor=i
endif

"-------------------------------------------------------------------setting neocomplcache
" 補完ウィンドウの設定
set completeopt=menuone
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" 起動時に有効化
let g:neocomplcache_enable_at_startup = 1
" 大文字が入力されるまで大文字小文字の区別を無視する
let g:neocomplcache_enable_smart_case = 1
" Use camel case completion.
let g:neocomplcache_enable_camel_case_completion = 1
" _(アンダースコア)区切りの補完を有効化
let g:neocomplcache_enable_underbar_completion = 1
" シンタックスをハイライトするときの最小文字列
let g:neocomplcache_min_syntax_length = 3
" ポップアップメニューで表示される候補の数
let g:neocomplcache_max_list = 20

if !exists('g:neocomplcache_keyword_patterns')
        let g:neocomplcache_keyword_patterns = {}
endif
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'






" ---------------------
" プログラム
" ----------------------
set smartindent
" set nosmartindent
set expandtab
set ts=4 sw=4 sts=0
set smarttab
set whichwrap=,s,h,l,<,>,[,]

set ignorecase
set smartcase
set wrapscan
set noincsearch

" カーソル行をハイライト
set cursorline
" カレントウィンドウにのみ罫線を引く
augroup cch
  autocmd! cch
  autocmd WinLeave * set nocursorline
  autocmd WinEnter,BufRead * set cursorline
augroup END

hi clear CursorLine
hi CursorLine gui=underline
highlight CursorLine ctermbg=black guibg=black

" コマンド実行中は再描画しない
set lazyredraw

" .rbでタブ幅を変更
au BufNewFile,BufRead *.rb set nowrap tabstop=2 shiftwidth=2

" 保存時に行末の空白を除去する
" autocmd BufWritePre * :%s/\s\+$//ge

" vimgrep検索時に結果一覧を自動的に開く
augroup grepopen
  autocmd!
  autocmd QuickFixCmdPost vimgrep cw
  autocmd QuickFixCmdPost grep cw
augroup END

" CTRL-hjklでウィンドウ移動
nnoremap 0 ^
nnoremap 9 $

" visualmodeでインテントを＞＜の連打で変更できるようにする
vnoremap < <gv
vnoremap > >gv

" ファイルを開いた時に最後のカーソル位置を再現する
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

" 無限undo
if has('persistent_undo')
  set undodir=~/.vim/undo
  set undofile
endif

" 検索語が真ん中に来るようにする
nmap n nzz
nmap N Nzz
nmap * *zz
" nmap # #zz
" inoremap # a<C-H>#
nmap g* g*zz
nmap g# g#zz


" ヘルプを日本語に
set helplang=ja

" Java用ハイライト
let java_highlight_all=1
let java_highlight_debug=1
let java_highlight_functions=1
" let java_space_errors=1


" 全角スペースの表示
highlight ZenkakuSpace cterm=underline ctermfg=lightblue guibg=darkgray
match ZenkakuSpace /　/

" let java_highlight_java_beans=1

au BufNewFile,BufRead * match ZenkakuSpace /　/

"--------------------------------------------------------------> bind

set backspace=2

nnoremap j gj
nnoremap k gk

inoremap jj <Esc>

" ----------------
" オートコマンド
" ---------------
if has("autocmd")
    " ファイルタイプ別インデント、プラグインを有効にする
    filetype plugin indent on
    " カーソル位置を記憶する
    autocmd BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \   exe "normal g'\"" |
        \ endif
endif



" --------------------
" 国際化関係
" --------------------
" 文字コードの設定
" fileencordingsの設定ではencordingの値を一番最後に記述する

filetype on
set encoding=utf-8
autocmd FileType c,cpp,perl,java set cindent
autocmd FileType java :set fileencoding=utf-8
autocmd FileType python :set fileencoding=utf-8
autocmd FileType ruby :set fileencoding=utf-8
autocmd FileType php :set dictionary=~/.vim/dict/php.dict
autocmd FileType ruby :set dictionary=~/.vim/dict/ruby.dict

autocmd FileType python setl expandtab tabstop=4 shiftwidth=4 softtabstop=4


set shiftwidth=4
set enc=utf-8
 set fenc=utf-8
" set enc=sjis
" set fenc=sjis
 set termencoding=utf-8
 set fileencoding=utf-8
set fileencodings=utf-8,iso-2022-jp,euc-jp,sjis
set hlsearch

" 挿入モードでのカーソル移動
inoremap <C-j> <Down>
inoremap <C-k> <Up>
inoremap <C-h> <Left>
inoremap <C-l> <Right>

