export LANG=ja_JP.UTF-8

#=================##
## File Operation ##
##=================#
autoload -U compinit
compinit -u
## 補完候補を一覧表示
setopt auto_list
## TAB で順に補完候補を切り替える
setopt auto_menu
# 入力したコマンドが存在せず、かつディレクトリ名と一致するなら、ディレクトリに cd する
# 例： /usr/bin と入力すると /usr/bin ディレクトリに移動
setopt auto_cd
# cd した先のディレクトリをディレクトリスタックに追加する
# ディレクトリスタックとは今までに行ったディレクトリの履歴のこと
# `cd +<Tab>` でディレクトリの履歴が表示され、そこに移動できる

setopt auto_pushd
## 同じディレクトリを pushd しない
setopt pushd_ignore_dups
# 拡張 glob を有効にする
# glob とはパス名にマッチするワイルドカードパターンのこと
# （たとえば `mv hoge.* ~/dir` における "*"）
# 拡張 glob を有効にすると # ~ ^ もパターンとして扱われる
# どういう意味を持つかは `man zshexpn` の FILENAME GENERATION を参照
setopt extended_glob
## 補完候補一覧でファイルの種別をマーク表示
setopt list_types
## カッコの対応などを自動的に補完
setopt auto_param_keys
## ディレクトリ名の補完で末尾の / を自動的に付加し、次の補完に備える
setopt auto_param_slash
## スペルチェック
setopt correct
## ファイル名の展開でディレクトリにマッチした場合末尾に / を付加する
setopt mark_dirs
# PCRE 互換の正規表現を使う
#setopt re_match_pcre
# = のあとも補完する
setopt magic_equal_subst
setopt no_beep
# プロンプトが表示されるたびにプロンプト文字列を評価、置換する
setopt prompt_subst
## 補完候補を詰めて表示
setopt list_packed
## 補完候補のカーソル選択を有効に
zstyle ':completion:*:default' menu select=1
## 補完候補の色づけ
zstyle ':completion:*' list-colors 'di=;34;1' 'ln=;35;1' 'so=;32;1' 'ex=31;1' 'bd=46;34' 'cd=43;34'
zstyle ':completion:*:sudo:*' command-path /usr/local/sbin /usr/local/bin /usr/sbin /usr/bin /sbin /bin
# 補完で小文字でも大文字にマッチさせる
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
# ../ の後は今いるディレクトリを補完しない
# zstyle ':completion:*' ignore-parents parent pwd ..
# sudo の後ろでコマンド名を補完する
zstyle ':completion:*:sudo:*' command-path /usr/local/sbin /usr/local/bin \
    /usr/sbin /usr/bin /sbin /bin /usr/X11R6/bin
# ps コマンドのプロセス名補完
zstyle ':completion:*:processes' command 'ps x -o pid,s,args'
# Emacs 風キーバインドにする
bindkey -e

# URLをコピペ
#autoload -Uz url-quote-magic
#zle -N self-insert url-quote-magic
#setopt autopushd

## バージョン管理システムの情報も表示する
autoload -Uz vcs_info
zstyle ':vcs_info:*' enable git
#zstyle ':vcs_info:*' formats $' [%r:%b]'
# zstyle ':vcs_info:*' formats $'%c%u[%b:%r]'
zstyle ':vcs_info:*' formats '[%b@%r]'
zstyle ':vcs_info:*' actionformats $'%c%u[%b|%a:%r]'

# 単語の一部として扱われる文字のセットを指定する
# ここではデフォルトのセットから / を抜いたものとする
# こうすると、 Ctrl-W でカーソル前の1単語を削除したとき、 / までで削除が止まる
WORDCHARS='*?_-.[]~=&;!#$%^(){}<>'

#=========##
### PROMPT ##
###=========#
## <エスケープシーケンス>
## prompt_bang が有効な場合、!=現在の履歴イベント番号, !!='!' (リテラル)
# ${WINDOW:+"[$WINDOW]"} = screen 実行時にスクリーン番号を表示 (prompt_subst が必要)
# %B = underline
# %/ or %d = ディレクトリ (0=全て, -1=前方からの数)
# %~ = ディレクトリ
# %h or %! = 現在の履歴イベント番号
# %L = 現在の $SHLVL の値
# %M = マシンのフルホスト名
#  %m = ホスト名の最初の `.' までの部分
# %S (%s) = 突出モードの開始 (終了)
# %U (%u) = 下線モードの開始 (終了)
# %B (%b) = 太字モードの開始 (終了)
# %t or %@ = 12 時間制, am/pm 形式での現在時刻
# %n or $USERNAME = ユーザー ($USERNAME は環境変数なので setopt prompt_subst が必要)
# %N = シェル名
# %i = %N によって与えられるスクリプト, ソース, シェル関数で, 現在実行されている行の番号 (debug用)
# %T = 24 時間制での現在時刻
# %* = 24 時間制での現在時刻, 秒付き
# %w = `曜日-日' の形式での日付
# %W = `月/日/年' の形式での日付
# %D = `年-月-日' の形式での日付
# %D{string} = strftime 関数を用いて整形された文字列 (man 3 strftime でフォーマット指定が分かる)
# %l = ユーザがログインしている端末から, /dev/ プレフィックスを取り除いたもの
# %y = ユーザがログインしている端末から, /dev/ プレフィックスを取り除いたもの (/dev/tty* はソノママ)
# %? = プロンプトの直前に実行されたコマンドのリターンコード
# %_ = パーサの状態
# %E = 行末までクリア
# %# = 特権付きでシェルが実行されているならば `#', そうでないならば `%' == %(!.#.%%)
# %v = psvar 配列パラメータの最初の要素の値
# %{...%} = リテラルのエスケープシーケンスとして文字列をインクルード
# %(x.true-text.false-text) = 三つ組の式
# %<string<, %>string>, %[xstring] = プロンプトの残りの部分に対する, 切り詰めの振る舞い
#         `<' の形式は文字列の左側を切り詰め, `>' の形式は文字列の右側を切り詰めます
# %c, %., %C = $PWD の後ろ側の構成要素

autoload -U colors && colors
# 色の定義

#DEFAULT="%{[0;0m%}"
#RESET="%{${reset_color}%}"
#
#GREEN="%{${fg[green]}%}"
#
#BLUE="%{${fg[blue]}%}"
#RED="%{${fg[red]}%}"
#CYAN="%{${fg[cyan]}%}"
#YELLOW="%{${fg[yellow]}%}"
#MAGENTA="%{${fg[magenta]}%}"
#WHITE="%{${fg[white]}%}"

#color
local gray=$'%{\e[0;30m%}'
local red=$'%{\e[0;31m%}'          # 赤色
local green=$'%{\e[0;32m%}'        # 緑色
local yellow=$'%{\e[0;33m%}'       # 黄色
local blue=$'%{\e[0;34m%}'         # 青色
local purple=$'%{\e[0;35m%}'       # 紫色
local light_blue=$'%{\e[0;36m%}'   # 水色
local white=$'%{\e[0;37m%}'        # 白色
local GRAY=$'%{\e[1;30m%}'
local RED=$'%{\e[1;31m%}'          # 赤色
local GREEN=$'%{\e[1;32m%}'        # 緑色
local YELLOW=$'%{\e[1;33m%}'       # 黄色
local BLUE=$'%{\e[1;34m%}'         # 青色
local PURPLE=$'%{\e[1;35m%}'       # 紫色
local CYAN=$'%{\e[1;36m%}'   # 水色
local WHITE=$'%{\e[1;37m%}'        # 白色
local DEFAULT=$white               # 標準の色
local BEER=`echo -e "\xF0\x9f\x8d\xba"`
local ARROW1=`echo -e "\xE2\x9E\x9c"` #➜
#
#PROMPT="${LIGHT_BLUE}%B[%n@%~]%b${RESET}
#PROMPT="%F{039}%B[%n@%~]%b%f
PROMPT="${CYAN}%D{%T} @%n %1(v|%F${RED}%1v%f|) ${YELLOW}[%~]
${CYAN}${ARROW1}  "
PROMPT2="%B%{[33m%}%_%{[m%}%b "
SPROMPT="${YELLOW}%D{%T} ${ARROW1} Did you mean ${RED} %r ${YELLOW}? [y/n]:%b "
[ -n "${REMOTEHOST}${SSH_CONNECTION}" ] && PROMPT="%{[37m%}${HOST%%.*} ${PROMPT}"
RPROMPT="${YELLOW}[%C]"

# バージョン管理システムの情報を取得する。
LANG=C vcs_info >&/dev/null
# バージョン管理システムの情報があったら右プロンプトに表示する。
#if [ -n "$vcs_info_msg_0_" ]; then
#    RPROMPT="${WHITE}${vcs_info_msg_0_}-${RPROMPT}"
#fi
precmd () {
    psvar=()
    LANG=en_US.UTF-8 vcs_info
    [[ -n "$vcs_info_msg_0_" ]] && psvar[1]="$vcs_info_msg_0_"
}

# バージョン管理されているディレクトリにいれば表示，そうでなければ非表示
    RPROMPT="${RPROMPT}"
#RPROMPT="%1(v|%F{green}%1v%f|)"

# コマンドを実行するときに右プロンプトを消す。
setopt transient_rprompt


#==========##
## HISTORY ##
##==========#
HISTFILE=~/.zsh_history
HISTSIZE=100000
SAVEHIST=100000
## zsh の開始, 終了時刻をヒストリファイルに書き込む
setopt extended_history
## 直前と同じコマンドをヒストリに追加しない
setopt hist_ignore_dups
setopt hist_ignore_all_dups
## ヒストリを呼び出してから実行する間に一旦編集
setopt hist_verify
## ヒストリを共有
setopt share_history
## コマンドラインの先頭がスペースで始まる場合ヒストリに追加しない
setopt hist_ignore_space
autoload history-search-end
## すぐにヒストリファイルに追記する。
setopt inc_append_history
## C-sでのヒストリ検索が潰されてしまうため、出力停止・開始用にC-s/C-qを使わない。
setopt no_flow_control
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey "^P" history-beginning-search-backward-end
bindkey "^N" history-beginning-search-forward-end

# カーソル位置から前方削除
# override kill-whole-line
bindkey '^U' backward-kill-line

# 単語移動
bindkey ";5C" forward-word
bindkey ";5D" backward-word

# report time
# REPORTTIME=3

#################
#
#    tmux
#
export PATH=~/.tmux/bin:$PATH
# export DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:/usr/local/opt/cairo/lib

alias tma='tmux attach-session -t'
alias tml='tmux list-sessions'
alias tmw='tmux list-windows'
alias tmn='tmux new-session -s'

#alias ctags='/usr/local/Cellar/ctags/5.8/bin/ctags'


# tmuxinator
# [[ -s $HOME/.tmuxinator/scripts/tmuxinator ]] && source $HOME/.tmuxinator/scripts/tmuxinator


########################################
# オプション
# 日本語ファイル名を表示可能にする
setopt print_eight_bit
# '#' 以降をコメントとして扱う
setopt interactive_comments

########################################
# キーバインド
# ^R で履歴検索をするときに * でワイルドカードを使用出来るようにする
bindkey '^R' history-incremental-pattern-search-backward
bindkey '^S' history-incremental-pattern-search-forward

#====##
## z ##
##====#
_Z_CMD=j
source $HOME/.zsh/z.sh

#================##
## ALIAS COMMAND ##
##================#
setopt complete_aliases
alias vi='/usr/local/bin/vim'
alias vim='/usr/local/bin/vim'
alias l='ls -G'
alias la='ls -a'
alias ll='ls -alh'
alias ls='ls -G'
alias rm='rm -i'
alias mv='mv -i'
alias cp='cp -i'
#alias cp='cp'
alias du='du -h'
alias df='df -h'
set -o noclobber
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias mkdir='mkdir -p'

# sudo の後のコマンドでエイリアスを有効にする
alias sudo='sudo '

# グローバルエイリアス
alias -g L='| less'
alias -g G='| grep'


# cd + ls
function cd() {
  builtin cd $@ && ls;
}

# make の出力をカラー漬け
e_normal=`echo -e "\033[0;30m"`
e_RED=`echo -e "\033[1;31m"`
e_BLUE=`echo -e "\033[1;36m"`

function make() {
    LANG=C command make "$@" 2>&1 | sed -e "s@[Ee]rror:.*@$e_RED&$e_normal@g" -e "s@cannot\sfind.*@$e_RED&$e_normal@g" -e "s@[Ww]arning:.*@$e_BLUE&$e_normal@g"
}
function cwaf() {
    LANG=C command ./waf "$@" 2>&1 | sed -e "s@[Ee]rror:.*@$e_RED&$e_normal@g" -e "s@cannot\sfind.*@$e_RED&$e_normal@g" -e "s@[Ww]arning:.*@$e_BLUE&$e_normal@g"
}

function check_path() {
	LF=${LF%_}
	LF=$(printf '\\\012_')
	echo $PATH | sed 's/:/'"$LF"'/g'
}


bindkey "[3~" delete-char

